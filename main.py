import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
from database import createUser, createTask, getStatus, getRandomTask

api_token = '7358477783:AAFqhM5DZUWF18keUNoFC0EV6I5PZrlxD50'
bot = Bot(token=api_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command('start'))
async def cmd_start(message:Message):
    user = message.from_user
    await createUser(user.id, user.username)
    keyboard1 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º', callback_data='practice')],
        [InlineKeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')],
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task')]
    ])
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –∏–∑ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ.', reply_markup=keyboard1)

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫

@dp.callback_query(F.data == 'practice')
async def practice_handler(callback: CallbackQuery):
    keyboard2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ó–∞–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä 18', callback_data='task_18')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ])
    await callback.message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:', reply_markup=keyboard2)

class TaskPracticeState(StatesGroup):
    waiting_for_answer = State()

@dp.callback_query(F.data == 'task_18')
async def send_task_18(callback: CallbackQuery, state: FSMContext):
    task = await getRandomTask()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="answer_right")],
        [InlineKeyboardButton(text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="answer_wrong")],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ])

    sent = await callback.message.answer(task["description"], reply_markup=keyboard)
    await state.set_state(TaskPracticeState.waiting_for_answer)
    await state.update_data(
    task_id=task["id"],
    is_right=task["is_right_answer"],
    description_answer=task["description_answer"],
    message_ids=[sent.message_id]
)


@dp.callback_query(TaskPracticeState.waiting_for_answer)
async def check_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    correct_answer = data["is_right"]
    message_ids = data.get("message_ids", [])

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É
    for msg_id in message_ids:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    user_answer = callback.data == "answer_right"
    result_msg = await callback.message.answer("‚úÖ –í–µ—Ä–Ω–æ!" if user_answer == correct_answer else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")
    explanation_msg = await callback.message.answer(data["description_answer"])

    # ‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö –¥–≤—É—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≤ —Ñ–æ–Ω–µ (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)
    async def delayed_cleanup():
        await asyncio.sleep(5)
        for msg in [result_msg, explanation_msg]:
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg.message_id)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    asyncio.create_task(delayed_cleanup())

    await state.clear()

    # ‚è±Ô∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî —Å—Ä–∞–∑—É
    await send_task_18(callback, state)



@dp.callback_query(F.data == 'profile')
async def profile_handler(callback: CallbackQuery):
    status = await getStatus(callback.from_user.id)
    print(status)
    keyboard3 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ])
    await callback.message.answer(
    f'<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüë§</b>\n'
    f'–ü—Ä–æ–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {status["total_tasks"]}\n'
    f'–û—Ç–≤–µ—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {status["correct"]}\n'
    f'–û—Ç–≤–µ—á–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {status["wrong"]}',
    reply_markup=keyboard3
    )


#–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É

class AddTaskState(StatesGroup):
    waiting_for_task_text = State()
    waiting_for_answer_type = State()

@dp.callback_query(F.data == 'add_task')
async def add_task_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddTaskState.waiting_for_task_text)
    keyboard2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=keyboard2)

@dp.message(AddTaskState.waiting_for_task_text)
async def get_task_text(message: Message, state: FSMContext):
    await state.update_data(task_text=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="answer_right")],
        [InlineKeyboardButton(text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="answer_wrong")],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ])

    await message.answer("–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π?", reply_markup=keyboard)
    await state.set_state(AddTaskState.waiting_for_answer_type)

@dp.callback_query(AddTaskState.waiting_for_answer_type)
async def get_answer_type(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'start':
        await state.clear()
        await callback.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await cmd_start(callback.message)
        await callback.answer()
        return

    data = await state.get_data()
    task_text = data['task_text']

    is_right = callback.data == "answer_right"

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    await createTask(task_text, is_right)

    await callback.message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    await state.clear()


#–ù–∞–∑–∞–¥

@dp.callback_query(F.data == 'start')
async def practice_handler(callback: CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())